HTTP Request:
    When you go to duckduckgo.com, you are sending an HTTP request that says "send me the contents of your website at this address"
    That's doing a "get" request
    Uses HTTP to make that request


You can use lambda expressions in any code that requires instances of delegate types or expression trees.
For example, as an argument to the Task.Run(Action) method to pass the code that should be executed in the background.
You can also use lambda expressions when you write LINQ query expressions as the following example shows:
    int[] numbers = {2, 3, 4, 5};
    var squaredNumbers = numbers.Select(x => x * x);
    Console.WriteLine(string.Join(" ", squaredNumbers));
    // output: 4, 9, 16, 25

Expression lambda:
    (input-parameters) => expression
    returns result of expression
    Action line = () => Console.WriteLine();
    Func<int, int, bool> testEquality = (x, y) => x == y;
    Func<int, string, bool> isTooLong = (int x, string s) => s.Length > x;
        sometimes compiler can't infer input types, in which case you must explicitly specify the types
    
Statement lambda:
    (input-parameters) => { <sequence of statements> }
    Action<string> greet = name => 
    { 
        string greeting = $"Hello {name}!";
        Console.WriteLine(greeting); 
    };
    greet("World");
    //output: Hello World!
    statement lambdas cannot be used to create expression trees.

Async lambda:
    The following Windows Forms example contains an event handler that calls and awaits an async method: ExampleMethodAsync

        public partial class Form1 : Form
        {
            public Form1()
            {
                InitializeComponent();
                button1.Click += button1_Click;
            }

            private async void button1_Click(object sender, EventArgs e)
            {
                await ExampleMethodAsync();
                textBox1.Text += "\r\nControl returned to Click event handler.\n";
            }

            private async Task ExampleMethodAsync()
            {
                // The following line simulates a task-returning asynchronous process.
                await Task.Delay(1000);
            }
        }

    You can add the same event handler by using an async lambda. To add this handler, add an async modifier before the lambda parameter list

        public partial class Form1 : Form
        {
            public Form1()
            {
                InitializeComponent();
                button1.Click += async (sender, e) =>
                {
                    await ExampleMethodAsync();
                    textBox1.Text += "\r\nControl returned to Click event handler.\n";
                };
            }

            private async Task ExampleMethodAsync()
            {
                // The following line simulates a task-returning asynchronous process.
                await Task.Delay(1000);
            }
        }

+ and += operators are supported by delegate types

    Action a = () => Console.Write("a");
    Action b = () => Console.Write("b");
    Action ab = a + b;
    ab();  // output: ab

    Action printer = () => Console.Write("a");
    printer();  // output: a

    Console.WriteLine();
    printer += () => Console.Write("b");
    printer();  // output: ab

?. = null conditional operator
    evaluate the first operand; if that's null, stop, with a result of null. Otherwise, evaluate the second operand (as a member access of the first operand)